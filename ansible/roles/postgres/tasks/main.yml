---

  - debug:
      var=images

  - group:
      name: postgres
      gid: 50010

  - user:
      name: postgres
      uid: 50010
      groups: "wheel,postgres"
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa
      comment: "postgres user, for running docker containers and EVS applications"
      state: present

  - name: Allow postgres user to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^postgres'
      line: 'postgres ALL=(ALL) NOPASSWD: ALL'

  - name: set password for postgres
    command: echo {{ postgres_unix_password }} | passwd --stdin postgres
    when: postgres_unix_password is defined

  - name: test if /u01 exists
    stat: 
      path: /u01
    register: u01_exists

  - name: test if /u02 exists
    stat: 
      path: /u02
    register: u02_exists
    
  - set_fact:
      pv_pgdata: "{{ storage['postgres'].data.disk | string }}"

  - name: volume group data
    lvg:
      vg: "{{ storage['postgres'].data.vg }}"
      pvs: "/dev/{{ pv_pgdata }}"
      state: present
    when: not (u01_exists.stat.isdir is defined and u01_exists.stat.isdir)
    
  - set_fact:
      pv_pgbackup: "{{ storage['postgres'].backup.disk }}"

  - name: volume group backup
    lvg:
      vg: "{{ storage['postgres'].backup.vg }}"
      pvs: "/dev/{{ pv_pgbackup }}"
      state: present
    when: not (u02_exists.stat.isdir is defined and u02_exists.stat.isdir)
    
  - name: creating logical volume lv_u01
    lvol: 
      vg: "{{ storage['postgres'].data.vg }}"
      lv: lv_u01
      size: "{{ ( (storage['postgres'].data.size_gb|int) * 1024)|int }}"
      state: present
    when: >
       hostvars[inventory_hostname]['ansible_lvm']['lvs']['lv_u01'] is not defined
       and not (u01_exists.stat.isdir is defined and u01_exists.stat.isdir)

  - name: creating filesystem on lv_u01
    filesystem: 
      fstype: xfs 
      dev: "/dev/{{ storage['postgres'].data.vg }}/lv_u01"
    when: not (u01_exists.stat.isdir is defined and u01_exists.stat.isdir)
    
  - name: mounting /u01
    mount: 
      name: /u01
      src: "/dev/{{ storage['postgres'].data.vg }}/lv_u01"
      fstype: xfs
      state: mounted
    when: not (u01_exists.stat.isdir is defined and u01_exists.stat.isdir)
    
  - name: creating LVM logical volume lv_u02
    lvol: 
      vg: "{{ storage['postgres'].backup.vg }}"
      lv: lv_u02
      size: "{{ ( (storage['postgres'].backup.size_gb|int) * 1024)|int }}"
      state: present
    when: >
      hostvars[inventory_hostname]['ansible_lvm']['lvs']['lv_u02'] is not defined
      and not (u02_exists.stat.isdir is defined and u02_exists.stat.isdir)

  - name: creating filesystem on lv_u02
    filesystem: 
      fstype: xfs 
      dev: "/dev/{{ storage['postgres'].backup.vg }}/lv_u02"
    when: not (u02_exists.stat.isdir is defined and u02_exists.stat.isdir)
    
  - name: mounting /u02
    mount: 
      name: /u02
      src: "/dev/{{ storage['postgres'].backup.vg }}/lv_u02"
      fstype: xfs
      state: mounted
    when: not (u02_exists.stat.isdir is defined and u02_exists.stat.isdir)
    
  - name: directory /u01/pgxx/data
    file:
      path: "/u01/pg{{ postgres_pg_version }}/data"
      state: directory
      mode: 0700      
      owner: postgres
      group: postgres

  - name: directory /u02/archive
    file:
      path: /u02/archive
      state: directory
      mode: 0755      
      owner: postgres
      group: postgres

  - name: directory /u02/backup
    file:
      path: /u02/backup
      state: directory
      mode: 0755      
      owner: postgres
      group: postgres


  - name: load postgres image
    include: "../../../shared_tasks/load_image.yml"
    vars:
      image: "{{ images.postgres }}"

#  - name: load postgres image
#    docker_image:
#      name: pg:0.3.3

#  - name: load pgpool image
#    docker_image:
#      name: pgpool:0.3.3

#  - name: load manager image
#    docker_image:
#      name: manager:0.1.3

  - name: load pgpool image
    include: "../../../shared_tasks/load_image.yml"
    vars:
       image: "{{ images.pgpool }}"

  - name: load manager image
    include: "../../../shared_tasks/load_image.yml"
    vars:
       image: "{{ images.manager }}"
