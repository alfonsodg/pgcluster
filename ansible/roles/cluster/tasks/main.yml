---

  # let us use a group called cluster
  - add_host:
      name: "{{ item }}"
      groups: cluster
    with_items: "{{ groups.all }}"
    when: groups.cluster is undefined

  - add_host:
      name: "{{ item }}"
      groups: postgres
    with_items: "{{ groups.all[:3] }}"
    when: groups.postgres is undefined

  - add_host:
      name: "{{ item }}"
      groups: pgpool
    with_items: "{{ groups.all[:3] }}"
    when: groups.pgpool is undefined

  #- debug: var=groups['pgpool']

#  - name: get docker node id 
#    shell: docker node inspect self -f \{\{.ID\}\}
#    delegate_to: "{{ item }}"
#    register: docker_node_id
#    with_items:
#      - "{{ groups['cluster'] }}"

  - name: get docker node id 
    shell: docker node inspect self -f \{\{.ID\}\}
    register: docker_node_id
    when: inventory_hostname in groups['cluster']

  - debug: 
      var: docker_node_id

  - set_fact:
      docker_node_id: "{{ docker_node_id.stdout }}"
    when: inventory_hostname in groups['cluster']

  - name: ensure directory /opt/pgcluster/bin exists
    file:
      path: /opt/pgcluster/bin
      state: directory
      owner: pgadmin
      group: pgadmin
      mode: 0755

  - name: install pgcluster.conf
    template:
      src: pgcluster.conf.j2
      dest: /etc/pgcluster/pgcluster.conf
      owner: pgadmin
      group: pgadmin
      mode: 0550

  - name: Add IP address of all hosts in /etc/hosts 
    lineinfile:
      dest: /etc/hosts
      line: "{{ hostvars[item].ansible_host }} {{ hostvars[item].inventory_hostname }} {{ hostvars[item].inventory_hostname_short }}"
      state: present
    with_items: "{{ groups.cluster }}"

  - name: fetch postgres public ssh key
    shell: cat /home/postgres/.ssh/id_rsa.pub
    register: postgres_ssh_keys

  - name: deploy postgres public key to all servers
    authorized_key: user=postgres key="{{ item[0] }}" state=present
    delegate_to: "{{ item[1] }}"
    with_nested:
      - "{{ postgres_ssh_keys.stdout }}"
      - "{{ groups['cluster'] }}"

  - name: generate host key file
    command: "ssh-keyscan -t ecdsa-sha2-nistp256 {{ inventory_hostname }}"
    register: host_pub_key

#  - debug: var=host_pub_key.stdout

  - name: add to know_hosts of other servers
    known_hosts:
      path: /home/postgres/.ssh/known_hosts
      name: "{{ inventory_hostname }}"
      key: "{{ host_pub_key.stdout }}"
    delegate_to: "{{ item }}"
    when: item != inventory_hostname
    with_items:
      - "{{ groups['cluster'] }}"

#  - debug: var=hostvars[item]['ansible_default_ipv4']['address']
#    with_items: "{{ groups['cluster'] }}"

#  - debug: var=groups['cluster'][0]

  #- set_fact:
  #    docker_node_1: "{{ hostvars[groups['cluster'][0]].docker_node_id.results[0].stdout }}"
  #    docker_node_2: "{{ hostvars[groups['cluster'][0]].docker_node_id.results[1].stdout }}"
  #    docker_node_3: "{{ hostvars[groups['cluster'][0]].docker_node_id.results[2].stdout }}"

  #- debug:
  #    var: docker_node_1

  #- debug:
  #    var: docker_node_2

  - name: install docker-compose.yml
    template: 
      src: "docker-compose.yml"
      dest: "/opt/pgcluster/docker-compose.yml"
      owner: pgadmin
      group: pgadmin
      mode: "u=rw,g=r,o=r"

  - name: copy start script
    copy:
      src: start_pgcluster.sh
      dest: /opt/pgcluster/start_pgcluster.sh
      owner: pgadmin
      group: pgadmin
      mode: 0754

  - name: authorized key for manager
    authorized_key:
      key: "ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAqi1qAUEbO43hrxvi8TCVqGope3LMFhY7OQy+5QpBYsO0Vsz4FIu8qtXiXiX1pLe+5efrc+AJpP/skchnb/IBm7Czi9Gft8jOFRzCZy/CIVL6tocrPhTEr++q3CQ86UjFPtaQDOJGZK2bzfv6MfKy5KeGOevxa8KBEW54SdjSR528LveohqHRj98hoDbVf0+IK2e3zlp9Tp0Q/SrxCAg6CiHGEh8PmL9SshHccLVvX1qsjZbJBBkAtCkuzAju7B4lcxZ/XKqd8BrH9AVcE7X4QgNvXzBDx1ZZghloQKhSjsILzahHAHxesiONJ5C4YtWo0MWJLHDduqod0ZV7l61QCQ== postgres@docker-image"
      user: root
      state: present

  - name: firewall port for the manager
    firewalld:
      port: 8080/tcp
      permanent: true
      state: enabled


...
