---

  - group:
      name: postgres
      gid: 50010

  - user:
      name: postgres
      uid: 50010
      groups: "wheel,postgres"
      generate_ssh_key: yes
      ssh_key_bits: 2048
      ssh_key_file: .ssh/id_rsa
      comment: "postgres user, for running docker containers and EVS applications"
      state: present

  - name: Allow postgres user to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^postgres'
      line: 'postgres ALL=(ALL) NOPASSWD: ALL'


  - name: volume group vg_01
    lvg:
      vg: vg01
      pvs: "{{ pgdata_disk }}"
      state: present

  - name: volume group vg_02
    lvg:
      vg: vg02
      pvs: "{{ pgbackup_disk }}"
      state: present

  - name: check if lv_u01 already exists
    command: lvdisplay /dev/vg01/lv_u01
    ignore_errors: true
    register: lv_u01_exists

  - name: creating LVM logical volume lv_u01
    lvol: 
      vg: vg01
      lv: lv_u01
      size: "100%FREE"
      state: present
    when: lv_u01_exists.rc != 0

  - name: creating filesystem on lv_u01
    filesystem: 
      fstype: xfs 
      dev: /dev/vg01/lv_u01

  - name: mounting /u01
    mount: 
      name: /u01
      src: /dev/vg01/lv_u01
      fstype: xfs
      state: mounted

  - name: check if lv_u02 already exists
    command: lvdisplay /dev/vg02/lv_u02
    ignore_errors: true
    register: lv_u02_exists

  - debug: var=lv_u02_exists.rc

  - name: creating LVM logical volume lv_u02
    lvol: 
      vg: vg02
      lv: lv_u02
      size: "100%FREE"
      state: present
    when: lv_u02_exists.rc != 0

  - name: creating filesystem on lv_u02
    filesystem: 
      fstype: xfs 
      dev: /dev/vg02/lv_u02

  - name: mounting /u02
    mount: 
      name: /u02
      src: /dev/vg02/lv_u02
      fstype: xfs
      state: mounted

  - name: directory /u01/pg96/data
    file:
      path: /u01/pg96/data
      state: directory
      mode: 700      
      owner: postgres
      group: postgres

  - name: directory /u02/archive
    file:
      path: /u02/archive
      state: directory
      mode: 755      
      owner: postgres
      group: postgres

  - name: directory /u02/backup
    file:
      path: /u02/backup
      state: directory
      mode: 755      
      owner: postgres
      group: postgres

  - name: copy rpm evs-pg-utils to server 
    copy:
      src: "{{ item }}"
      dest: /tmp/{{ item | basename }}
    with_fileglob:
      - "{{ stage_dir }}/evs-pg-utils*.rpm"

  - name: find name of rpm to install 
    shell: ls /tmp/evs-pg-utils*.rpm | tail -1
    register: ls_content

  - name: install evs-pg-utils rpm
    yum:
      name: "{{ ls_content.stdout }} "
      state: present
    when: ls_content.stdout.find('evs-pg-utils') != -1

  - name: copy evs-phoenix-postgres image tar to server
    copy:
      src: "{{ stage_dir }}/evs-phoenix-postgres.{{ postgres_ver }}.tar"
      dest: /tmp/evs-phoenix-postgres.{{ postgres_ver }}.tar

  - name: pull evs-phoenix-postgres image
    docker_image:
      name: evs-phoenix-postgres
      load_path: /tmp/evs-phoenix-postgres.{{ postgres_ver }}.tar
      state: present

  - name: remove evs-phoenix-postgres image tar file
    file:
      path: /tmp/evs-phoenix-postgres.{{ postgres_ver }}.tar
      state: absent

  - name: copy evs-phoenix-ppgpool image tar to server
    copy:
      src: "{{ stage_dir }}/evs-phoenix-pgpool.{{ postgres_ver }}.tar"
      dest: /tmp/evs-phoenix-pgpool.{{ postgres_ver }}.tar

  - name: pull evs-phoenix-pgpool image
    docker_image:
      name: evs-phoenix-ppgpool
      load_path: /tmp/evs-phoenix-pgpool.{{ postgres_ver }}.tar
      state: present

  - name: remove evs-phoenix-pgpool image tar file
    file:
      path: /tmp/evs-phoenix-pgpool.{{ postgres_ver }}.tar
      state: absent
