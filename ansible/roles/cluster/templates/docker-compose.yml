version: '3.4'

networks:
  default:
    external:
      name: pgcluster_network

services:
{% for i in groups['pgpool'] %}
  pgpool0{{ groups['pgpool'].index(i) + 1 }}:
    image: {{ docker_url }}{{ images.pgpool.name }}:{{ images.pgpool.tag }}
    environment:
      PG_MASTER_NODE_NAME: pg01
      PG_BACKEND_NODE_LIST: ${PG_BACKEND_NODE_LIST}
      PGP_NODE_NAME: pgpool0{{ groups['pgpool'].index(i) + 1 }}
{% set comma = joiner(",") %}
      PGP_HEARTBEATS: {% for item in groups.pgpool -%} {{ comma() }}{{loop.index-1}}:pgpool0{{ loop.index }}:9694
              {%- endfor %}{{" "}}
{% set comma = joiner(",") %}
      PGP_OTHERS: {% set other_index = namespace(a=0) %}{% for item in groups['pgpool'] -%}{% if item != i %}{{ comma() }}{{other_index.a}}:pgpool0{{ loop.index }}:9999{% set other_index.a = other_index.a + 1 %}{% endif %}{% endfor %}{{" "}}
      REPMGRPWD: ${REPMGRPDW:-rep123}
      NUM_INIT_CHILDREN: 70
      DELEGATE_IP: ${DELEGATE_IP}/${DELEGATE_IP_INTERFACE}
      DELEGATE_IP_INTERFACE: ${DELEGATE_IP_INTERFACE}
      TRUSTED_SERVERS: ${TRUSTED_SERVERS}
      DOCKERHOST: ${DOCKERHOST}
    volumes:
      - /etc/localtime:/etc/localtime
    ports:
    - published: 19999
      target: 9999
      mode: host
      protocol: tcp
    - published: 19898
      target: 9898
      mode: host
      protocol: tcp
    deploy:
{% if (groups['pgpool']|length)>1 %}
      placement:
        constraints:
          - node.id == {{ hostvars[i].docker_node_id }}
{% endif %}
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
{% endfor %}

{% for i in groups['postgres'] %}
  pg0{{ groups['postgres'].index(i) + 1 }}:
    image: {{ docker_url }}{{ images.postgres.name }}:{{ images.postgres.tag }}
    environment:
      INITIAL_NODE_TYPE: {% if groups['postgres'].index(i) == 0 %}master{% else %}slave{% endif %}{{" "}}
      NODE_ID: {{ groups['postgres'].index(i) + 1 }}
      NODE_NAME: pg0{{ groups['postgres'].index(i) + 1 }}
      ARCHIVELOG: 1
      MSLIST: ${MSLIST}
      MSOWNERPWDLIST: ${MSOWNERPWDLIST}
      MSUSERPWDLIST: ${MSUSERPWDLIST}
      REPMGRPWD: ${REPMGRPDW:-rep123}
      REPMGRD_FAILOVER_MODE: ${REPMGRD_FAILOVER_MODE}
      PGPOOL_FAILOVER_MODE: ${PGPOOL_FAILOVER_MODE}
      REPMGRD_RECONNECT_ATTEMPTS: ${REPMGRD_RECONNECT_ATTEMPTS}
      REPMGRD_RECONNECT_INTERVAL: ${REPMGRD_RECONNECT_INTERVAL}
      PGPOOL_HEALTHCHECK_MAX_RETRIES: ${PGPOOL_HEALTHCHECK_MAX_RETRIES}
      PGPOOL_HEALTHCHECK_RETRY_DELAY: ${PGPOOL_HEALTHCHECK_RETRY_DELAY}
    deploy:
{% if (groups['postgres']|length)>1 %}
      placement:
        constraints:
          - node.id == {{ hostvars[i].docker_node_id }}
{% endif %}
    volumes:
      - /u01/pg10/data:/u01/pg10/data
      - /u02/archive:/u02/archive
      - /u02/backup:/u02/backup
      - /etc/localtime:/etc/localtime
    ports:
      - target: 5432
        published: 5432
        protocol: tcp
        mode: host
{% endfor %}

  #console
  manager:
    image: {{ docker_url }}{{ images.manager.name }}:{{ images.manager.tag }}
    ports:
      - 8080:8080
    environment:
      DOCKERHOST: ${DOCKERHOST}
      PG_BACKEND_NODE_LIST: ${PG_BACKEND_NODE_LIST}
      REPMGRPWD: ${REPMGRPDW:-rep123}
      DBHOST: ${DELEGATE_IP}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - /u02/backup:/u02/backup
    deploy:
      placement:
        constraints:
          - node.role == manager
    logging:
      driver: journald
      options:
        tag: manager
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
